leveragedReturns <- rets
colnames(leveragedReturns) <- paste("Leveraged", colnames(leveragedReturns), sep="_")
leveragedReturns <- leveragedReturns[-1,]
hof <- LogicalInvestUIS(returns = leveragedReturns, period = 63, modSharpeF = 2.8)
hof2 <- LogicalInvestUIS(returns = leveragedReturns, period = 73, modSharpeF = 3)
hof3 <- LogicalInvestUIS(returns = leveragedReturns, period = 84, modSharpeF = 4)
hof4 <- LogicalInvestUIS(returns = leveragedReturns, period = 42, modSharpeF = 1.5)
LogicalInvestUIS <- function(returns, period = 63, modSharpeF = 2.8) {
returns[is.na(returns)] <- 0 #impute any NAs to zero
configs <- list()
for(i in 1:11) {
weightFirst <- (i-1)*.1
weightSecond <- 1-weightFirst
config <- Return.portfolio(R = returns, weights=c(weightFirst, weightSecond), rebalance_on = "months")
configs[[i]] <- config
}
configs <- do.call(cbind, configs)
cumRets <- cumprod(1+configs)
#rolling cumulative
rollAnnRets <- (cumRets/lag(cumRets, period))^(252/period) - 1
rollingSD <- sapply(X = configs, runSD, n=period)*sqrt(252)
modSharpe <- rollAnnRets/(rollingSD ^ modSharpeF)
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="months"),]
findMax <- function(data) {
return(data==max(data))
}
#configs$zeroes <- 0 #zeroes for initial periods during calibration
weights <- t(apply(monthlyModSharpe, 1, findMax))
weights <- weights*1
weights <- xts(weights, order.by=as.Date(rownames(weights)))
weights[is.na(weights)] <- 0
weights$zeroes <- 1-rowSums(weights)
configCopy <- configs
configCopy$zeroes <- 0
stratRets <- Return.portfolio(R = configCopy, weights = weights)
weightFirst <- apply(monthlyModSharpe, 1, which.max)
weightFirst <- do.call(rbind, weightFirst)
weightFirst <- (weightFirst-1)*.1
align <- cbind(weightFirst, stratRets)
align <- na.locf(align)
chart.TimeSeries(align[,1], date.format="%Y", ylab=paste("Weight", colnames(returns)[1]),
main=paste("Weight", colnames(returns)[1]))
return(stratRets)
}
tmf3TLT[,2] <- tmf3TLT[,2] - ((1+discrepancy)^(1/252)-1)
getSymbols("SPY", from="1990-01-01")
LogicalInvestUIS <- function(returns, period = 63, modSharpeF = 2.8) {
returns[is.na(returns)] <- 0 #impute any NAs to zero
configs <- list()
for(i in 1:11) {
weightFirst <- (i-1)*.1
weightSecond <- 1-weightFirst
config <- Return.portfolio(R = returns, weights=c(weightFirst, weightSecond), rebalance_on = "months")
configs[[i]] <- config
}
configs <- do.call(cbind, configs)
cumRets <- cumprod(1+configs)
#rolling cumulative
rollAnnRets <- (cumRets/lag(cumRets, period))^(252/period) - 1
rollingSD <- sapply(X = configs, runSD, n=period)*sqrt(252)
modSharpe <- rollAnnRets/(rollingSD ^ modSharpeF)
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="months"),]
findMax <- function(data) {
return(data==max(data))
}
#configs$zeroes <- 0 #zeroes for initial periods during calibration
weights <- t(apply(monthlyModSharpe, 1, findMax))
weights <- weights*1
weights <- xts(weights, order.by=as.Date(rownames(weights)))
weights[is.na(weights)] <- 0
weights$zeroes <- 1-rowSums(weights)
configCopy <- configs
configCopy$zeroes <- 0
stratRets <- Return.portfolio(R = configCopy, weights = weights)
weightFirst <- apply(monthlyModSharpe, 1, which.max)
weightFirst <- do.call(rbind, weightFirst)
weightFirst <- (weightFirst-1)*.1
align <- cbind(weightFirst, stratRets)
align <- na.locf(align)
chart.TimeSeries(align[,1], date.format="%Y", ylab=paste("Weight", colnames(returns)[1]),
main=paste("Weight", colnames(returns)[1]))
return(stratRets)
}
getSymbols("TMF", from="1990-01-01")
TMFrets <- Return.calculate(Ad(TMF))
getSymbols("TLT", from="1990-01-01")
TLTrets <- Return.calculate(Ad(TLT))
tmf3TLT <- merge(TMFrets, 3*TLTrets, join='inner')
charts.PerformanceSummary(tmf3TLT)
Return.annualized(tmf3TLT[,2]-tmf3TLT[,1])
discrepancy <- as.numeric(Return.annualized(tmf3TLT[,2]-tmf3TLT[,1]))
tmf3TLT[,2] <- tmf3TLT[,2] - ((1+discrepancy)^(1/252)-1)
modifiedTLT <- 3*TLTrets - ((1+discrepancy)^(1/252)-1)
rets <- merge(3*Return.calculate(Ad(SPY)), modifiedTLT, join='inner')
colnames(rets) <- gsub("\\.[A-z]*", "", colnames(rets))
leveragedReturns <- rets
colnames(leveragedReturns) <- paste("Leveraged", colnames(leveragedReturns), sep="_")
leveragedReturns <- leveragedReturns[-1,]
hof <- LogicalInvestUIS(returns = leveragedReturns, period = 63, modSharpeF = 2.8)
hof2 <- LogicalInvestUIS(returns = leveragedReturns, period = 73, modSharpeF = 3)
hof3 <- LogicalInvestUIS(returns = leveragedReturns, period = 84, modSharpeF = 4)
hof4 <- LogicalInvestUIS(returns = leveragedReturns, period = 42, modSharpeF = 1.5)
hof5 <- LogicalInvestUIS(returns = leveragedReturns, period = 63, modSharpeF = 6)
hof6 <- LogicalInvestUIS(returns = leveragedReturns, period = 73, modSharpeF = 2)
head(tmf3TLT)
head(leveragedReturns)
hofComparisons <- cbind(hof, hof2, hof3, hof4, hof5, hof6)
colnames(hofComparisons) <- c("d63_F2.8", "d73_F3", "d84_F4", "d42_F1.5", "d63_F6", "d73_F2")
pnorm(0.36)
pnorm(0)
pnorm(-1)
pnorm(1)
pnorm(1)-pnorm(01)
pnorm(1)-pnorm(-1)
450/sqrt(5)
2000/(450/sqrt(5))
2000/(450*sqrt(5))
pnorm(1.987116)
pnorm(1.987616)
(1-pnorm(1.987616))*2
2000/(450*sqrt(20))
(1-pnorm(0.993808))*2
qnorm(0.95)
qnorm(0.95)*2.38+1.07
-qnorm(0.95)*2.38+1.07
-1.65*2.38+1.07
-1.15/2.89
pnorm(-1.15/2.89)
140/135-1
(16-3.7)/24
(12-3.7)/17
(10-3.7)/12
(19-3.7)/11
(9-3.7)/11
(3.7-10)/12
pnorm(-0.525)
scan()
x=scan()
x = log(x)
x = x[2:10] - x[1:9]
x
mean(x)
sum(x)/9
x = x - mean(x)
x = x^2
x
sum(x)
sqrt(sum(x))
x=scan()
logx = log()
logx = log(x)
difx = logx[2:10] - logx[1:9]
difx
mean(x)
mean(difx)
difx-mean(difx)
y=difx-mean(difx)
sum(y)
sum(x)
sum(logx)
difx
sum(difx)
y
y=y^2
sum(y)
y=difx+0.002207
y=y^2
y
sum(y)
sum(y)/9
sum(y)/8
y=difx-mean(difx)
y=y^2
y
sum(y)
sum(y)/8
var=sum(y)/8
sd=sqrt(var)
sd
var*250
sd*sqrt(250)
2/sqrt(49)
qnorm(0.95)
qnorm(0.975)
75+20/sqrt(100) * qnorm(0.975)
75-20/sqrt(100) * qnorm(0.975)
70+14/sqrt(25)*2.787
14/sqrt(25)*2.797
qt(0.95,24)
qt(0.995,24)
qt(0.99,24, lower.tail = FALSE)
qt(0.99,24,)
qt(0.99,24)
44-19
25/2
12.5/qnorm(0.975)
(0.08/0.01265)^2
qnorm(0.95)
qnorm(0.95)*0.2/sqrt(5)
qnorm(0.95)*0.2/sqrt(5)+.12
qnorm(0.95)*0.2/sqrt(5)-.12
2.84+0.4/sqrt(20)
2.84-0.4/sqrt(20)
2.84-0.4/sqrt(40)
2.84=0.4/sqrt(40)
2.84+.4/sqrt(40)
qnorm(0.95)
qt(0.95,39)
qt(0.95,19)
2.84+0.4/sqrt(20)*qt(0.95,19)
2.84-0.4/sqrt(20)*qt(0.95,19)
2.84-0.4/sqrt(40)*qt(0.95,19)
2.84+0.4/sqrt(40)*qt(0.95,39)
2.84-0.4/sqrt(40)*qt(0.95,39)
2.84+0.4/sqrt(40)*qnorm(0.95)
2.84-0.4/sqrt(15)*qt(0.95,14)
2.84+0.4/sqrt(15)*qt(0.95,14)
2.84+0.4/sqrt(60)*qt(0.95,59)
2.84-0.4/sqrt(60)*qt(0.95,59)
qnorm(0.995)
qnorm(0.99)
qt(p = 0.05,df = 35)
qt(p = 0.01,df = 35)
qt(p = 0.99,df = 35)
qt(p = 0.995,df = 35)
qt(p = 0.99,df = 35)
qt(p = 0.99,df = 350)
qt(p = 0.99,df = 35)
149750-145000
4750/24000/6
24000/6
4750/24000*6
29*325^2/300^2
qnorm(0.995)
qnorm(0.95)
?pbinom
dbinom(0,3,0.5)
dbinom(1,3,0.5)
dbinom(2,3,0.5)
dbinom(3,3,0.5)
4/11/10/9
sqrt(35/3)
x = -99999999:0
sum(-4/81*(x^4/4 - 9*x^2/2))
500*0.5*0.5
sqrt(125)
(260-250)/sqrt(125)
(260-250)/sqrt(125)*2
(260-250)/sqrt(125)
pnorm(0)
pnorm(0.8944272)-pnorm(-0.8944272)
pnorm(-0.8944272)
pnorm(0.8944272)-pnorm(-0.8944272)
(280-250)/sqrt(125)
pnorm(2.683282)-pnorm(-2.683282)
?binom
pbinom
?pbinom
pbinom(2,10,0.1)
9*10/2*0.01*0.9^8
dbinom(2,10,0.1)
0.5*exp()
0.5*exp(1)
0.5*exp(-1)
0.1937102-0.1839397
2*10*0.1^2
5^3*4^2*3^2*5*3/126
5^3*4^2*3^2*5*3/12^6
-0.04/(1/12/sqrt(200))
sqrt(0.55*0.45/100)
sqrt(0.55*0.45/100)*1.96+0.55
(64*39+49*49)/88
sqrt(55.64775)
sqrt(55.64773)
sqrt(9/200)
4/(7.45*0.21)
pow(2,4)
1616^2
1625^2
3625^2
1625^2
2625^2
8125^2
2525^2
251^2
2511^2
(1:99)^2
(1:99)^2-1:99
rbind(1:99,(1:99)^2-1:99)
cbind(1:99,(1:99)^2-1:99)
1376^2
3676^2
2576^2
1176^2
676^2
176^2
276^2
376^2
476^2
576^2
676^2
776^2
876^2
976^2
925^2
825^2
725^2
625^2
1625
1625^2
2625^2
3625^2
4625^2
5625^2
6625^2
7625^2
8625^2
9625^2
9625^2
1625^2
25^2
76^2
176^2
276^2
376^2
1376
1376^2
2376^2
3376^2
4376^2
5376^2
6376^2
7376^2
8376^2
9376^2
pnorm(1.0729)
pnorm(0.9979)
4/52 * 3/51 / 50 / 49/ 48/ 47/ 46/ 45/ 44/ 43/ 42/ 41
x = c(89, 72, 94, 69)
x
mean(x)
x - mean(x)
(x - mean(x)) / (max(x) - min(x))
log(0.5)
-log(0.5)
25*28
1945+2010
2010+2385
4395-3955
4*2.5*2
28*250
1.5*1.5
3*2*1.5
6*4*18
432/9
60*40*18
60*40*18/9
2745/2495
165000*0.7
112/48
95/110
195/110500
19500/110500
195000/110500
1.044*(1-0.028)
1.035^3
1.05^5
1.03*1.05*1.04*1.06
log(10)
sd(c(5,8,12))
which.min(c(4,1,6))
2x = 4
s2.r = 5
summary(s2.r)
str(s2.r)
getwd()
getwd()
1/(1+exp(1))
0.2689414/(1-0.2689414)
log(0.2689414/(1-0.2689414))
log(0.3678794)
log(0.36789)
quality = read.csv("~/Dropbox/Education/edX/The Analytics Edge/Unit 3/Data/quality.csv")
install.packages("caTools")
library(caTools)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
summary(QualityLog)
str(quasi)
str(quality)
QualityLog = glm(PoorCare ~ StartedOnCombination + ProviderCount, data=qualityTrain, family=binomial)
summary(QualityLog)
# Unit 3, Modeling the Expert
# Video 4
# Read in dataset
quality = read.csv("quality.csv")
# Look at structure
str(quality)
# Table outcome
table(quality$PoorCare)
# Baseline accuracy
98/131
# Install and load caTools package
install.packages("caTools")
install.packages("caTools")
library(caTools)
# Randomly split data
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
split
# Create training and testing sets
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
# Logistic Regression Model
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
summary(QualityLog)
# Make predictions on training set
predictTrain = predict(QualityLog, type="response")
# Analyze predictions
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
# Video 5
# Confusion matrix for threshold of 0.5
table(qualityTrain$PoorCare, predictTrain > 0.5)
# Sensitivity and specificity
10/25
70/74
# Confusion matrix for threshold of 0.7
table(qualityTrain$PoorCare, predictTrain > 0.7)
# Sensitivity and specificity
8/25
73/74
# Confusion matrix for threshold of 0.2
table(qualityTrain$PoorCare, predictTrain > 0.2)
# Sensitivity and specificity
16/25
54/74
# Video 6
# Install and load ROCR package
install.packages("ROCR")
library(ROCR)
# Prediction function
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
# Performance function
ROCRperf = performance(ROCRpred, "tpr", "fpr")
# Plot ROC curve
plot(ROCRperf)
# Add colors
plot(ROCRperf, colorize=TRUE)
# Add threshold labels
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
predictTest = predict(QualityLog, type="response", newdata=qualityTest)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
performance(ROCRpredTest, "auc")
11/198
1069/1075
setwd("~/Dropbox/Education/edX/AnalyticsEdge/Unit 3")
##### POPULARITY OF MUSIC RECORDS #####
### Problem 1 - Understanding the Data ###
songs = read.csv("Data/songs.csv")
table(songs$year)
table(songs$artistname)
songs$songtitle[songs$Top10 == 1 & songs$artistname == 'Michael Jackson']
summary(as.factor(songs$timesignature))
table(songs$timesignature)
songs$songtitle[which.max(songs$tempo)]
SongsTrain = subset(songs, year <= 2009)
SongsTest = subset(songs, year > 2009)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
names(SongsTest)
names(SongsTest) %in% nonvars
nonvars %in% SongsTest
SongsTest %in% nonvars
SongsTest
SongsTest %in% nonvars
nonvars %in% SongsTest
nonvars %in% names(nonvars)
nonvars %in% names(SongsTest)
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
summary(SongsLog1)
cor(SongsTrain$loudness, SongsTrain$energy)
SongsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
summary(SongsLog2)
SongsLog3 = glm(Top10 ~ . - energy, data=SongsTrain, family=binomial)
summary(SongsLog2)
summary(SongsLog3)
SongsPred = predict(SongsLog3, newdata = SongsTrain)
SongsPred
SongsPred = predict(SongsLog3, newdata = SongsTrain, type = "response")
SongsPred
table(SongsTest$Top10, SongsPred >= 0.45)
SongsPred = predict(SongsLog3, newdata = SongsTest, type = "response")
table(SongsTest$Top10, SongsPred >= 0.45)
19 + 309 / (19 + 309 + 5 + 45)
# (19 + 309) / (19 + 309 + 5 + 45)
(19 + 309) / (19 + 309 + 5 + 45)
(19 + 309) / (19 + 309 + 5 + 40)
table(SongsTest$Top10, SongsPred >= 1)
table(SongsTest$Top10, SongsPred >= 0)
table(SongsTest$Top10, SongsPred >= 1)
314 / (314 + 59)
table(SongsTest$Top10)
table(SongsTest$Top10, SongsPred >= 0.45)
19 / (19 + 40)
309 / (309 + 5)
